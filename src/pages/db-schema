-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admin_users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text NOT NULL UNIQUE,
  role text DEFAULT 'staff'::text CHECK (role = ANY (ARRAY['super_admin'::text, 'manager'::text, 'staff'::text])),
  is_active boolean DEFAULT true,
  last_login timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT admin_users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.categories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  sort_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  tenant_id uuid,
  CONSTRAINT categories_pkey PRIMARY KEY (id),
  CONSTRAINT categories_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.menu_discounts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  description text,
  discount_type character varying NOT NULL CHECK (discount_type::text = ANY (ARRAY['percentage'::character varying, 'fixed_amount'::character varying]::text[])),
  discount_value numeric NOT NULL CHECK (discount_value > 0::numeric),
  is_active boolean DEFAULT true,
  start_date timestamp with time zone,
  end_date timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT menu_discounts_pkey PRIMARY KEY (id)
);
CREATE TABLE public.menu_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  category_id uuid,
  name text NOT NULL,
  description text,
  price integer NOT NULL CHECK (price >= 0),
  photo_url text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  discount_id uuid,
  base_price numeric NOT NULL DEFAULT 0,
  short_description text,
  tenant_id uuid,
  CONSTRAINT menu_items_pkey PRIMARY KEY (id),
  CONSTRAINT menu_items_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(id),
  CONSTRAINT menu_items_discount_id_fkey FOREIGN KEY (discount_id) REFERENCES public.menu_discounts(id),
  CONSTRAINT menu_items_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.menu_option_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  menu_option_id uuid NOT NULL,
  name character varying NOT NULL,
  additional_price numeric DEFAULT 0,
  is_available boolean DEFAULT true,
  sort_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT menu_option_items_pkey PRIMARY KEY (id),
  CONSTRAINT menu_option_items_menu_option_id_fkey FOREIGN KEY (menu_option_id) REFERENCES public.menu_options(id)
);
CREATE TABLE public.menu_options (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  menu_item_id uuid NOT NULL,
  label character varying NOT NULL,
  selection_type character varying NOT NULL CHECK (selection_type::text = ANY (ARRAY['single_required'::character varying, 'single_optional'::character varying, 'multiple'::character varying]::text[])),
  max_selections integer DEFAULT 1,
  is_required boolean DEFAULT false,
  sort_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT menu_options_pkey PRIMARY KEY (id),
  CONSTRAINT menu_options_menu_item_id_fkey FOREIGN KEY (menu_item_id) REFERENCES public.menu_items(id)
);
CREATE TABLE public.order_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_id uuid,
  menu_id uuid,
  name_snapshot text NOT NULL,
  price_snapshot integer NOT NULL,
  qty integer NOT NULL CHECK (qty > 0),
  notes text,
  line_total integer NOT NULL,
  tenant_id uuid,
  CONSTRAINT order_items_pkey PRIMARY KEY (id),
  CONSTRAINT order_items_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id),
  CONSTRAINT order_items_menu_id_fkey FOREIGN KEY (menu_id) REFERENCES public.menu_items(id),
  CONSTRAINT order_items_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.orders (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_code text,
  customer_name text NOT NULL,
  phone text NOT NULL,
  pickup_date date NOT NULL,
  notes text,
  payment_method text DEFAULT 'TRANSFER'::text CHECK (payment_method = ANY (ARRAY['TRANSFER'::text, 'QRIS'::text, 'COD'::text])),
  status text DEFAULT 'BELUM BAYAR'::text CHECK (status = ANY (ARRAY['BELUM BAYAR'::text, 'SUDAH BAYAR'::text, 'DIBATALKAN'::text])),
  subtotal integer NOT NULL,
  discount integer DEFAULT 0,
  service_fee integer DEFAULT 0,
  total integer NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  tenant_id uuid,
  CONSTRAINT orders_pkey PRIMARY KEY (id),
  CONSTRAINT orders_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.payment_methods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  is_active boolean DEFAULT true,
  sort_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  payment_type text DEFAULT 'TRANSFER'::text CHECK (payment_type = ANY (ARRAY['TRANSFER'::text, 'QRIS'::text, 'COD'::text])),
  bank_name text,
  account_number text,
  account_holder text,
  qris_image_url text,
  tenant_id uuid,
  CONSTRAINT payment_methods_pkey PRIMARY KEY (id),
  CONSTRAINT payment_methods_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.payment_proofs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_id uuid,
  method text,
  amount integer,
  proof_url text,
  created_at timestamp with time zone DEFAULT now(),
  tenant_id uuid,
  CONSTRAINT payment_proofs_pkey PRIMARY KEY (id),
  CONSTRAINT payment_proofs_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id),
  CONSTRAINT payment_proofs_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.tenant_activity_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid,
  user_email character varying NOT NULL,
  action character varying NOT NULL,
  resource character varying,
  resource_id uuid,
  metadata jsonb DEFAULT '{}'::jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tenant_activity_logs_pkey PRIMARY KEY (id),
  CONSTRAINT tenant_activity_logs_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.tenant_users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid,
  user_email character varying NOT NULL,
  role character varying DEFAULT 'admin'::character varying CHECK (role::text = ANY (ARRAY['super_admin'::character varying, 'admin'::character varying, 'manager'::character varying, 'cashier'::character varying]::text[])),
  permissions jsonb DEFAULT '[]'::jsonb,
  is_active boolean DEFAULT true,
  invited_by uuid,
  invited_at timestamp with time zone DEFAULT now(),
  joined_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tenant_users_pkey PRIMARY KEY (id),
  CONSTRAINT tenant_users_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT tenant_users_invited_by_fkey FOREIGN KEY (invited_by) REFERENCES auth.users(id)
);
CREATE TABLE public.tenants (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  slug character varying NOT NULL UNIQUE,
  subdomain character varying NOT NULL UNIQUE,
  domain character varying,
  email_domain character varying,
  settings jsonb DEFAULT '{"currency": "IDR", "language": "id", "timezone": "Asia/Jakarta", "contact_info": {"phone": "", "address": "", "instagram": ""}, "business_hours": {"open": "08:00", "close": "22:00"}}'::jsonb,
  is_active boolean DEFAULT true,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tenants_pkey PRIMARY KEY (id),
  CONSTRAINT tenants_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);